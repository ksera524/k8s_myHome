# Harbor HTTP Endpoint設定パッチ
# ArgoCD同期後に自動適用されるPost-Sync Hook
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-http-patch-job
  namespace: harbor
  labels:
    app: harbor-http-patch
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: harbor-http-patcher
      containers:
      - name: patch-container
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args: 
        - -c
        - |
          echo "Harbor HTTP設定パッチを適用中..."
          
          # Harbor Core ConfigMapのEXT_ENDPOINTをHTTPに変更
          kubectl patch configmap harbor-core -n harbor --type merge -p '{"data":{"EXT_ENDPOINT":"http://192.168.122.100"}}'
          
          # Harbor Core Pod再起動で設定反映
          echo "Harbor Core Pod再起動中..."
          kubectl delete pod -n harbor -l app=harbor,component=core || true
          
          # Pod再起動完了を待機
          kubectl wait --for=condition=ready pod -l app=harbor,component=core -n harbor --timeout=120s || true
          
          echo "Harbor HTTP設定パッチ適用完了"
      restartPolicy: OnFailure
  backoffLimit: 3
---
# Harbor HTTP設定パッチ用ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor-http-patcher
  namespace: harbor
---
# Harbor HTTP設定パッチ用Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: harbor-http-patcher
  namespace: harbor
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
# Harbor HTTP設定パッチ用RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: harbor-http-patcher
  namespace: harbor
subjects:
- kind: ServiceAccount
  name: harbor-http-patcher
  namespace: harbor
roleRef:
  kind: Role
  name: harbor-http-patcher
  apiGroup: rbac.authorization.k8s.io