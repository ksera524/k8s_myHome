# Harbor HTTP設定維持用CronJob
# 定期的にHarbor HTTP設定を確認・修正する
apiVersion: batch/v1
kind: CronJob
metadata:
  name: harbor-http-maintenance
  namespace: harbor
  labels:
    app: harbor-http-maintenance
spec:
  schedule: "*/2 * * * *"  # 2分間隔で実行
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: harbor-http-patcher
          containers:
          - name: maintenance-container
            image: bitnami/kubectl:latest
            command: ["/bin/bash"]
            args: 
            - -c
            - |
              echo "Harbor HTTP設定維持チェック開始..."
              
              # Harbor Core ConfigMapの現在の設定を確認
              CURRENT_ENDPOINT=$(kubectl get configmap harbor-core -n harbor -o jsonpath='{.data.EXT_ENDPOINT}')
              echo "現在のEXT_ENDPOINT: $CURRENT_ENDPOINT"
              
              # HTTPSからHTTPに変更が必要かチェック
              if [[ "$CURRENT_ENDPOINT" == "https://harbor.local" ]]; then
                echo "HTTPS設定を検出 - HTTPに変更中..."
                
                # Harbor Core ConfigMapのEXT_ENDPOINTをHTTPに変更
                kubectl patch configmap harbor-core -n harbor --type merge -p '{"data":{"EXT_ENDPOINT":"http://192.168.122.100:30002"}}'
                
                # Harbor Core Pod再起動で設定反映
                echo "Harbor Core Pod再起動中..."
                kubectl delete pod -n harbor -l app=harbor,component=core || true
                
                # 少し待機
                sleep 20
                
                # Pod再起動完了を待機
                kubectl wait --for=condition=ready pod -l app=harbor,component=core -n harbor --timeout=120s || true
                
                echo "Harbor HTTP設定を修正しました"
              else
                echo "Harbor HTTP設定は正常です"
              fi
              
              # GitHub Actions Runner設定もチェック
              RUNNER_SETS=$(kubectl get AutoscalingRunnerSet -n arc-systems -o name 2>/dev/null | wc -l)
              if [[ "$RUNNER_SETS" -gt 0 ]]; then
                echo "GitHub Actions Runner設定をチェック中..."
                
                for runner_set in $(kubectl get AutoscalingRunnerSet -n arc-systems -o name 2>/dev/null | sed 's|.*/||'); do
                  CURRENT_ARGS=$(kubectl get AutoscalingRunnerSet "$runner_set" -n arc-systems -o jsonpath='{.spec.template.spec.initContainers[1].args}' 2>/dev/null || echo "[]")
                  
                  if [[ "$CURRENT_ARGS" != *"--insecure-registry=192.168.122.100:30002"* ]]; then
                    echo "Runner Set '$runner_set' にinsecure registry設定を追加中..."
                    kubectl patch AutoscalingRunnerSet "$runner_set" -n arc-systems \
                      --type=json \
                      -p='[{"op":"replace","path":"/spec/template/spec/initContainers/1/args","value":["dockerd","--host=unix:///var/run/docker.sock","--group=$(DOCKER_GROUP_GID)","--insecure-registry=192.168.122.100:30002"]}]' 2>/dev/null || true
                    echo "✓ '$runner_set' のinsecure registry設定完了"
                  fi
                done
              fi
              
              echo "Harbor HTTP設定維持チェック完了"
          restartPolicy: OnFailure
---
# Harbor HTTP設定維持用ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor-http-patcher
  namespace: harbor
---
# Harbor HTTP設定維持用ClusterRole (arc-systems namespace access用)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: harbor-http-patcher
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
- apiGroups: ["actions.github.com"]
  resources: ["autoscalingrunnersets"]
  verbs: ["get", "list", "patch"]
---
# Harbor HTTP設定維持用ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: harbor-http-patcher
subjects:
- kind: ServiceAccount
  name: harbor-http-patcher
  namespace: harbor
roleRef:
  kind: ClusterRole
  name: harbor-http-patcher
  apiGroup: rbac.authorization.k8s.io