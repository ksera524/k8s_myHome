# Harbor CA証明書配布DaemonSet
# GitHub Actions Runnerに証明書を配布してTLS接続を有効にする
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: harbor-ca-distribution
  namespace: arc-systems
  labels:
    app: harbor-ca-distribution
spec:
  selector:
    matchLabels:
      app: harbor-ca-distribution
  template:
    metadata:
      labels:
        app: harbor-ca-distribution
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      initContainers:
      - name: ca-installer
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Harbor CA証明書配布を開始..."
          
          # Harbor証明書を取得
          mkdir -p /host-certs/harbor
          cp /etc/harbor-certs/tls.crt /host-certs/harbor/harbor.crt
          
          # システム証明書ストアに追加
          if [ -d "/host-usr-share-ca-certificates" ]; then
            cp /etc/harbor-certs/tls.crt /host-usr-share-ca-certificates/harbor.crt
            chroot /host update-ca-certificates || echo "update-ca-certificates failed"
          fi
          
          # Docker証明書ディレクトリに配布
          mkdir -p /host-docker-certs/192.168.122.100
          cp /etc/harbor-certs/tls.crt /host-docker-certs/192.168.122.100/ca.crt
          
          echo "Harbor CA証明書配布完了"
          
        volumeMounts:
        - name: harbor-certs
          mountPath: /etc/harbor-certs
          readOnly: true
        - name: host-ca-certificates
          mountPath: /host-usr-share-ca-certificates
        - name: host-docker-certs
          mountPath: /host-docker-certs
        - name: host-root
          mountPath: /host
        securityContext:
          privileged: true
      containers:
      - name: certificate-monitor
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Harbor CA証明書監視を開始..."
          while true; do
            # 証明書の有効性を定期的にチェック
            if openssl x509 -in /etc/harbor-certs/tls.crt -checkend 86400 -noout; then
              echo "Harbor証明書は有効です"
            else
              echo "Harbor証明書の期限が近づいています"
            fi
            sleep 3600  # 1時間ごとにチェック
          done
        volumeMounts:
        - name: harbor-certs
          mountPath: /etc/harbor-certs
          readOnly: true
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 64Mi
      volumes:
      - name: harbor-certs
        secret:
          secretName: harbor-tls-secret
      - name: host-ca-certificates
        hostPath:
          path: /usr/share/ca-certificates
          type: DirectoryOrCreate
      - name: host-docker-certs
        hostPath:
          path: /etc/docker/certs.d
          type: DirectoryOrCreate
      - name: host-root
        hostPath:
          path: /
          type: Directory

---
# Harbor CA証明書作成Job - cert-managerのCA証明書を取得してarc-systemsに配布
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-ca-cert-creator
  namespace: arc-systems
  labels:
    app: harbor-ca-distribution
spec:
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: harbor-ca-trust
      containers:
      - name: ca-cert-creator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "Harbor CA証明書作成Job開始..."
          
          # Kubeconfig設定
          export KUBECONFIG=/tmp/kubeconfig
          kubectl config set-cluster default \
              --server=https://kubernetes.default.svc \
              --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
              --kubeconfig=$KUBECONFIG
          kubectl config set-credentials default \
              --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
              --kubeconfig=$KUBECONFIG
          kubectl config set-context default \
              --cluster=default --user=default \
              --kubeconfig=$KUBECONFIG
          kubectl config use-context default --kubeconfig=$KUBECONFIG
          
          # cert-manager CA証明書の準備完了待機
          echo "cert-manager CA証明書の待機中..."
          timeout=300
          while [ $timeout -gt 0 ] && ! kubectl get secret ca-key-pair -n cert-manager >/dev/null 2>&1; do
            echo "cert-manager CA証明書待機中... (残り ${timeout}秒)"
            sleep 10
            timeout=$((timeout - 10))
          done
          
          if [ $timeout -le 0 ]; then
            echo "❌ cert-manager CA証明書待機がタイムアウトしました"
            exit 1
          fi
          
          # 既存のHarbor CA証明書削除
          kubectl delete secret harbor-ca-cert -n arc-systems --ignore-not-found=true
          
          # cert-manager CA証明書を取得してarc-systemsに作成
          echo "Harbor CA証明書をarc-systemsに作成中..."
          kubectl get secret ca-key-pair -n cert-manager -o jsonpath='{.data.tls\.crt}' | base64 -d > /tmp/harbor-ca.crt
          
          # arc-systemsネームスペースにSecret作成
          kubectl create secret generic harbor-ca-cert -n arc-systems \
              --from-file=ca.crt=/tmp/harbor-ca.crt
          
          # 作成確認
          if kubectl get secret harbor-ca-cert -n arc-systems >/dev/null 2>&1; then
            echo "✅ Harbor CA証明書作成完了"
            echo "証明書詳細:"
            openssl x509 -in /tmp/harbor-ca.crt -text -noout | grep -A 2 "Subject:" || echo "証明書解析エラー"
          else
            echo "❌ Harbor CA証明書作成失敗"
            exit 1
          fi
          
          rm -f /tmp/harbor-ca.crt
          echo "Harbor CA証明書作成Job完了"
        env: []
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"