# containerdの設定を更新してharbor.localをinsecure registryとして設定
apiVersion: v1
kind: ConfigMap
metadata:
  name: containerd-config
  namespace: kube-system
data:
  update-containerd.sh: |
    #!/bin/bash
    # containerdの設定ファイルをバックアップ
    cp /etc/containerd/config.toml /etc/containerd/config.toml.bak
    
    # insecure registryの設定を追加
    cat >> /etc/containerd/config.toml <<EOF
    
    [plugins."io.containerd.grpc.v1.cri".registry]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."harbor.local"]
          endpoint = ["http://harbor.local"]
      [plugins."io.containerd.grpc.v1.cri".registry.configs]
        [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor.local".tls]
          insecure_skip_verify = true
    EOF
    
    # containerdを再起動
    systemctl restart containerd
    echo "containerd configuration updated for harbor.local"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: containerd-config-updater
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: containerd-config-updater
  template:
    metadata:
      labels:
        name: containerd-config-updater
    spec:
      hostNetwork: true
      hostPID: true
      initContainers:
      - name: config-updater
        image: busybox
        command:
        - sh
        - -c
        - |
          # Check if configuration already exists
          if ! grep -q "harbor.local" /host-etc/containerd/config.toml 2>/dev/null; then
            echo "Adding harbor.local to containerd config..."
            
            # Create containerd config directory if it doesn't exist
            mkdir -p /host-etc/containerd
            
            # Check if config.toml exists
            if [ ! -f /host-etc/containerd/config.toml ]; then
              echo "Creating new containerd config..."
              cat > /host-etc/containerd/config.toml <<'EOF'
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
              [plugins."io.containerd.grpc.v1.cri".registry]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
                  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."harbor.local"]
                    endpoint = ["http://harbor.local"]
                [plugins."io.containerd.grpc.v1.cri".registry.configs]
                  [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor.local".tls]
                    insecure_skip_verify = true
          EOF
            else
              # Append to existing config
              cat >> /host-etc/containerd/config.toml <<'EOF'
          
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."harbor.local"]
            endpoint = ["http://harbor.local"]
          [plugins."io.containerd.grpc.v1.cri".registry.configs."harbor.local".tls]
            insecure_skip_verify = true
          EOF
            fi
            
            # Signal containerd to reload
            nsenter --target 1 --mount --uts --ipc --net --pid -- systemctl restart containerd || \
            nsenter --target 1 --mount --uts --ipc --net --pid -- killall -HUP containerd || \
            echo "Please manually restart containerd on this node"
            
            echo "Configuration updated"
          else
            echo "harbor.local already configured"
          fi
        volumeMounts:
        - name: host-etc
          mountPath: /host-etc
        securityContext:
          privileged: true
      containers:
      - name: pause
        image: gcr.io/google_containers/pause:3.2
      volumes:
      - name: host-etc
        hostPath:
          path: /etc
      tolerations:
      - operator: Exists