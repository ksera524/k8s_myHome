# GitHub Actions Runner Controller (ARC) - Official Version
# https://github.com/actions/actions-runner-controller
---
apiVersion: v1
kind: Namespace
metadata:
  name: arc-systems
  labels:
    app.kubernetes.io/part-of: actions-runner-controller
---
# External Secret for GitHub App/Token
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-app-secret
  namespace: arc-systems
spec:
  refreshInterval: 20s
  secretStoreRef:
    kind: ClusterSecretStore
    name: pulumi-esc-store
  target:
    name: github-app-secret
    creationPolicy: Owner
  data:
  - secretKey: github_token
    remoteRef:
      key: github
      property: token
---
# External Secret for Harbor Registry
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harbor-registry-secret
  namespace: arc-systems
spec:
  refreshInterval: 20s
  secretStoreRef:
    kind: ClusterSecretStore
    name: pulumi-esc-store
  target:
    name: harbor-registry-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |
          {
            "auths": {
              "{{ .harbor_url }}": {
                "username": "{{ .harbor_username }}",
                "password": "{{ .harbor_password }}",
                "auth": "{{ printf "%s:%s" .harbor_username .harbor_password | b64enc }}"
              }
            }
          }
  data:
  - secretKey: harbor_url
    remoteRef:
      key: harbor
      property: url
  - secretKey: harbor_username
    remoteRef:
      key: harbor
      property: username
  - secretKey: harbor_password
    remoteRef:
      key: harbor
      property: password
---
# ARC Controller Deployment using Helm Chart resources
apiVersion: v1
kind: ServiceAccount
metadata:
  name: arc-controller
  namespace: arc-systems
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: arc-controller
rules:
- apiGroups: [""]
  resources: ["pods", "secrets", "configmaps", "events", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["actions.github.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: arc-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: arc-controller
subjects:
- kind: ServiceAccount
  name: arc-controller
  namespace: arc-systems
---
# ARC Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: arc-controller
  namespace: arc-systems
  labels:
    app.kubernetes.io/name: arc-controller
    app.kubernetes.io/part-of: actions-runner-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: arc-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: arc-controller
    spec:
      serviceAccountName: arc-controller
      containers:
      - name: controller
        image: ghcr.io/actions/actions-runner-controller:latest
        env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-app-secret
              key: github_token
        - name: RUNNER_SCOPE_REPO
          value: "ksera524/k8s_myHome"
        - name: RUNNER_SCOPE_RUNNER_GROUP
          value: "default"
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8443
          name: webhook
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
# ARC Controller Service
apiVersion: v1
kind: Service
metadata:
  name: arc-controller
  namespace: arc-systems
  labels:
    app.kubernetes.io/name: arc-controller
spec:
  selector:
    app.kubernetes.io/name: arc-controller
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  - name: webhook
    port: 8443
    targetPort: 8443
---
# ConfigMap for runner configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: runner-config
  namespace: arc-systems
data:
  HARBOR_URL: "192.168.122.100"
  HARBOR_PROJECT: "sandbox"
  RUNNER_LABELS: "self-hosted,linux,k8s,harbor-enabled"
---
# GitHub Runner for k8s_myHome repository
apiVersion: v1
kind: Pod
metadata:
  name: github-runner-k8s-myhome
  namespace: arc-systems
  labels:
    app: github-runner
    repo: k8s-myhome
spec:
  serviceAccountName: arc-controller
  containers:
  - name: runner
    image: sumologic/actions-runner:ubuntu-20.04
    env:
    - name: REPO_URL
      value: "https://github.com/ksera524/k8s_myHome"
    - name: RUNNER_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-app-secret
          key: github_token
    - name: RUNNER_NAME
      value: "k8s-myhome-runner"
    - name: RUNNER_LABELS
      valueFrom:
        configMapKeyRef:
          name: runner-config
          key: RUNNER_LABELS
    - name: HARBOR_URL
      valueFrom:
        configMapKeyRef:
          name: runner-config
          key: HARBOR_URL
    - name: HARBOR_PROJECT
      valueFrom:
        configMapKeyRef:
          name: runner-config
          key: HARBOR_PROJECT
    resources:
      limits:
        cpu: "2"
        memory: "4Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
    volumeMounts:
    - name: work-volume
      mountPath: /home/runner/_work
    - name: docker-auth
      mountPath: /home/runner/.docker
      readOnly: true
    - name: var-run-docker
      mountPath: /var/run/docker.sock
  volumes:
  - name: work-volume
    emptyDir:
      sizeLimit: 5Gi
  - name: docker-auth
    secret:
      secretName: harbor-registry-secret
      items:
      - key: .dockerconfigjson
        path: config.json
  - name: var-run-docker
    hostPath:
      path: /var/run/docker.sock
      type: Socket
  restartPolicy: Always