# Harbor CA証明書の信頼設定スクリプト
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-ca-trust-script
  namespace: kube-system
data:
  install-ca.sh: |
    #!/bin/bash
    set -e
    
    # Harbor証明書の準備完了を待機
    while ! kubectl get secret harbor-tls-secret -n harbor >/dev/null 2>&1; do
      echo "Harbor証明書の作成を待機中..."
      sleep 10
    done
    
    # HarborのTLSシークレットからCA証明書を抽出
    kubectl get secret harbor-tls-secret -n harbor -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/harbor-ca.crt
    
    # システムの信頼ストアにCA証明書をインストール
    cp /tmp/harbor-ca.crt /etc/ssl/certs/harbor-ca.crt
    update-ca-certificates
    
    # Docker用の証明書設定
    mkdir -p /etc/docker/certs.d/192.168.122.100
    cp /tmp/harbor-ca.crt /etc/docker/certs.d/192.168.122.100/ca.crt
    
    mkdir -p /etc/docker/certs.d/harbor.local
    cp /tmp/harbor-ca.crt /etc/docker/certs.d/harbor.local/ca.crt
    
    # Dockerが稼働中の場合は再起動
    if systemctl is-active --quiet docker; then
      systemctl restart docker
    fi
    
    echo "Harbor CA証明書のインストールが完了しました"
    
    # 証明書維持のためコンテナを稼働し続ける
    while true; do
      sleep 3600
      # 証明書の更新チェック
      kubectl get secret harbor-tls-secret -n harbor -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/harbor-ca-new.crt
      if ! cmp -s /tmp/harbor-ca.crt /tmp/harbor-ca-new.crt; then
        echo "Harbor CA証明書が更新されました、再インストール中..."
        cp /tmp/harbor-ca-new.crt /tmp/harbor-ca.crt
        cp /tmp/harbor-ca.crt /etc/ssl/certs/harbor-ca.crt
        cp /tmp/harbor-ca.crt /etc/docker/certs.d/192.168.122.100/ca.crt
        cp /tmp/harbor-ca.crt /etc/docker/certs.d/harbor.local/ca.crt
        update-ca-certificates
        if systemctl is-active --quiet docker; then
          systemctl restart docker
        fi
        echo "Harbor CA証明書の更新が完了しました"
      fi
    done
---
# Harbor CA証明書を全ノードに配布するDaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: harbor-ca-trust
  namespace: kube-system
  labels:
    app: harbor-ca-trust
spec:
  selector:
    matchLabels:
      app: harbor-ca-trust
  template:
    metadata:
      labels:
        app: harbor-ca-trust
    spec:
      serviceAccountName: harbor-ca-trust
      hostNetwork: true  # ホストネットワークアクセス
      hostPID: true      # ホストプロセス管理
      containers:
      - name: harbor-ca-trust
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/install-ca.sh"]
        securityContext:
          privileged: true  # ホストファイルシステムへの書き込み権限
        volumeMounts:
        - name: host-etc-ssl
          mountPath: /etc/ssl/certs
        - name: host-etc-docker
          mountPath: /etc/docker
        - name: host-systemd
          mountPath: /host/systemd
        - name: script
          mountPath: /scripts
        env:
        - name: KUBECONFIG
          value: /var/run/secrets/kubernetes.io/serviceaccount
      volumes:
      - name: host-etc-ssl  # システム証明書ディレクトリ
        hostPath:
          path: /etc/ssl/certs
          type: DirectoryOrCreate
      - name: host-etc-docker  # Docker証明書ディレクトリ
        hostPath:
          path: /etc/docker
          type: DirectoryOrCreate
      - name: host-systemd  # systemd管理用
        hostPath:
          path: /run/systemd
          type: Directory
      - name: script  # インストールスクリプト
        configMap:
          name: harbor-ca-trust-script
          defaultMode: 0755
      tolerations:
      - operator: Exists  # 全ノードで実行
---
# Harbor CA信頼管理用のサービスアカウント (kube-system)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor-ca-trust
  namespace: kube-system
---
# Harbor CA信頼管理用のサービスアカウント (arc-systems)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor-ca-trust
  namespace: arc-systems
---
# Harbor証明書シークレットへの読み取り権限
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: harbor-ca-trust
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "delete"]  # All Secret管理権限
---
# ClusterRoleとServiceAccountのバインディング
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: harbor-ca-trust
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: harbor-ca-trust
subjects:
- kind: ServiceAccount
  name: harbor-ca-trust
  namespace: kube-system
- kind: ServiceAccount
  name: harbor-ca-trust
  namespace: arc-systems