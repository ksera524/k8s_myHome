# GitHub Actions workflow template for {{REPOSITORY_NAME}}
# Auto-generated by add-runner.sh (公式ARC対応版)

name: Build and Push to Harbor - {{REPOSITORY_NAME}}

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: {{RUNNER_NAME}}  # Self-hosted runner scale set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Harbor credentials
      run: |
        echo "=== Setup Harbor credentials ==="
        
        # Configure kubectl for in-cluster access
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Get Harbor credentials
        echo "Getting Harbor credentials from k8s secret..."
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_USERNAME}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PASSWORD}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_URL}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o jsonpath='{.data.HARBOR_PROJECT}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor credentials retrieved successfully"
        
    - name: Build Docker image
      run: |
        echo "=== Building Docker image ==="
        docker build -t {{REPOSITORY_NAME}}:latest .
        docker build -t {{REPOSITORY_NAME}}:${{ github.sha }} .
        echo "✅ Docker images built successfully"
        
    - name: Push to Harbor
      run: |
        echo "=== Push to Harbor ==="
        
        # Load credentials
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Login to Harbor
        echo "$HARBOR_PASSWORD" | docker login "$HARBOR_URL" -u "$HARBOR_USERNAME" --password-stdin
        
        # Tag images
        docker tag {{REPOSITORY_NAME}}:latest "$HARBOR_URL/$HARBOR_PROJECT/{{REPOSITORY_NAME}}:latest"
        docker tag {{REPOSITORY_NAME}}:${{ github.sha }} "$HARBOR_URL/$HARBOR_PROJECT/{{REPOSITORY_NAME}}:${{ github.sha }}"
        
        # Push images
        docker push "$HARBOR_URL/$HARBOR_PROJECT/{{REPOSITORY_NAME}}:latest"
        docker push "$HARBOR_URL/$HARBOR_PROJECT/{{REPOSITORY_NAME}}:${{ github.sha }}"
        
        echo "✅ Images pushed successfully to Harbor"
        
    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        rm -f /tmp/harbor_* /tmp/kubeconfig
        docker logout || true
        echo "✅ Cleanup completed"