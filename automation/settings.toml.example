# k8s_myHome 自動化設定ファイル（サンプル）
# このファイルをコピーして settings.toml として使用してください
#
# 使用方法:
# 1. cp settings.toml.example settings.toml
# 2. 必要な値を設定（秘匿情報のみ）
# 3. make all 実行
#
# セキュリティ注意:
# - settings.toml は .gitignore に追加済み
# - リポジトリにコミットしないでください

# ========================================
# Kubernetes クラスタ設定
# ========================================
[kubernetes]
# クラスタ名
cluster_name = "home-k8s"
# Kubernetesバージョン
version = "v1.29.0"
# Kubernetesユーザー
user = "k8suser"
# SSH秘密鍵パス
ssh_key_path = "/home/k8suser/.ssh/id_ed25519"

# ========================================
# ネットワーク設定（デフォルト値・通常変更不要）
# ========================================
[network]
# ホストネットワーク設定
network_cidr = "192.168.122.0/24"
gateway_ip = "192.168.122.1"

# Kubernetes ノードIP
control_plane_ip = "192.168.122.10"
worker_1_ip = "192.168.122.11"
worker_2_ip = "192.168.122.12"

# Kubernetes内部ネットワーク
pod_network_cidr = "10.244.0.0/16"
service_cidr = "10.96.0.0/12"

# MetalLB LoadBalancer IP範囲
metallb_ip_start = "192.168.122.100"
metallb_ip_end = "192.168.122.150"

# サービス固定IP
harbor_lb_ip = "192.168.122.100"
ingress_lb_ip = "192.168.122.101"
argocd_lb_ip = "192.168.122.102"

# サービスポート
kubernetes_api_port = 6443
argocd_port_forward = 8080
harbor_port_forward = 8081

# ========================================
# Harbor設定
# ========================================
[harbor]
# Harbor URL（変更不要）
url = "harbor.local"
# Harbor HTTPポート
http_port = 80
# Harbor HTTPSポート（未使用）
https_port = 443
# デフォルトプロジェクト
project = "sandbox"
# 管理者ユーザー名
admin_username = "admin"
# 管理者パスワード（External Secrets経由で取得、必須）
# admin_password = ""  # 環境変数 HARBOR_ADMIN_PASSWORD または ESO経由で設定
# レジストリサイズ
registry_size = "100Gi"
# データベースサイズ
database_size = "10Gi"

# ========================================
# アプリケーションバージョン
# ========================================
[versions]
# インフラコンポーネント
metallb = "0.13.12"
ingress_nginx = "4.8.2"
cert_manager = "1.13.3"
argocd = "5.51.6"
harbor = "1.13.1"
external_secrets = "0.9.11"

# CNI
flannel = "latest"

# ========================================
# ストレージ設定
# ========================================
[storage]
# ストレージベースディレクトリ
base_dir = "/data"
# NFSシェアディレクトリ
nfs_share = "/data/nfs-share"
# ローカルボリュームディレクトリ
local_volumes = "/data/local-volumes"
# StorageClass名
default_storage_class = "local-path"

# ========================================
# タイムアウト設定（秒）
# ========================================
[timeout]
# デフォルトタイムアウト
default = 300
# kubectl コマンドタイムアウト
kubectl = 120
# Helm コマンドタイムアウト
helm = 300
# ArgoCD 同期タイムアウト
argocd_sync = 600
# SSH接続タイムアウト
ssh_connect = 10
# Terraform タイムアウト
terraform = 600

# ========================================
# リトライ設定
# ========================================
[retry]
# デフォルトリトライ回数
count = 3
# リトライ間隔（秒）
delay = 5
# 最大リトライ間隔（秒）
max_delay = 60

# ========================================
# ログ設定
# ========================================
[logging]
# ログディレクトリ
log_dir = "/var/log/k8s-myhome"
# ログレベル (DEBUG, INFO, WARN, ERROR)
log_level = "INFO"
# デバッグモード
debug = false
# 詳細出力
verbose = false

# ========================================
# ホストセットアップ設定（make all時に使用）
# ========================================
[host_setup]
# USB外部ストレージデバイス名
# lsblk コマンドで確認してください
# 例: "sdb", "sdc", "nvme0n1"
usb_device_name = ""

# ========================================
# Pulumi設定（External Secrets Operator用）
# ========================================
[pulumi]
# Pulumi Access Token (必須・要入力)
# 取得方法: https://app.pulumi.com/account/tokens
# 形式: pul-で始まる40文字の英数字
access_token = ""
# Pulumi組織名
organization = "ksera"
# Pulumiプロジェクト名
project = "k8s"
# Pulumi環境名
environment = "secret"

# ========================================
# GitHub設定（GitHub Actions Runner用）
# ========================================
[github]
# GitHubユーザー名（必須・要入力）
# add-runner.sh, ArgoCD OAuth設定で使用
username = ""

# GitHub Actions Runner Controller (ARC) 対象リポジトリリスト
# make all実行時に自動作成されるRunnerScaleSet用設定
# 
# 📋 設定方法:
# 各配列要素: [リポジトリ名, 最小Runner数, 最大Runner数, 説明]
#
# 🔧 Runner数の設定指針:
# minRunners (最小Runner数):
#   0 = オンデマンド起動 - ジョブがあるときのみRunner起動（リソース節約）
#   1 = 常時稼働 - 1台のRunnerが常駐してすぐにジョブを開始
#
# maxRunners (最大Runner数):
#   同時実行可能な最大Runner数（並列ジョブ数に応じて設定）
#   推奨: 通常は 1-3、大規模プロジェクトは 5以下
#
# 🏃 作成されるRunnerScaleSet名:
# リポジトリ名 "my.project" → Runner名 "my-project-runners"
# (ドット、アンダースコアは自動的にハイフンに変換)
#
# 📝 使用例:
# arc_repositories = [
#     ["k8s_myHome", 1, 3, "メインの k8s_myHome プロジェクト"],
#     ["slack.rs", 0, 3, "Slack.rs Rust プロジェクト"], 
#     ["docs-site", 0, 1, "軽量なドキュメントサイト"],
#     ["api-server", 0, 2, "API サーバープロジェクト"]
# ]
#
# 🎯 Workflow内での使用:
# jobs:
#   build:
#     runs-on: k8s-myhome-runners    # k8s_myHome専用
#     runs-on: slack-rs-runners      # slack.rs専用
arc_repositories = []

# ========================================
# 自動化オプション（settings-loader.shで使用）
# ========================================
[automation]
# 確認プロンプトを自動でYesにする
auto_confirm_overwrite = true
# External Secrets Operatorを有効化
enable_external_secrets = true
# GitHub Actions Runnerを有効化
enable_github_actions = true
# モニタリングを有効化
enable_monitoring = false
# バックアップを有効化
enable_backup = false