---
# Phase 3: k8s クラスタ構築 Playbook
# kubeadm を使用してControl Plane + Worker Node 2台の構成

- name: "Phase 3.1: Control Plane 初期化"
  hosts: control_plane
  become: yes
  gather_facts: true
  vars:
    pod_network_cidr: "10.244.0.0/16"  # Flannel用
    cluster_endpoint: "192.168.122.10:6443"
  
  tasks:
    - name: cloud-init完了まで待機
      wait_for:
        path: /var/log/cloud-init-complete
        timeout: 300
      
    - name: システム情報確認
      debug:
        msg: "設定中: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
    
    - name: containerd設定確認・修正
      block:
        - name: containerd設定ファイル生成
          shell: containerd config default > /etc/containerd/config.toml
          
        - name: SystemdCgroup有効化
          lineinfile:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            line: '            SystemdCgroup = true'
            backup: yes
            
        - name: containerd再起動
          systemd:
            name: containerd
            state: restarted
            enabled: yes

    - name: kubeadm設定準備
      block:
        - name: kubeadm-config.yaml作成
          template:
            dest: /tmp/kubeadm-config.yaml
            content: |
              apiVersion: kubeadm.k8s.io/v1beta3
              kind: InitConfiguration
              localAPIEndpoint:
                advertiseAddress: {{ ansible_default_ipv4.address }}
                bindPort: 6443
              ---
              apiVersion: kubeadm.k8s.io/v1beta3
              kind: ClusterConfiguration
              kubernetesVersion: v1.29.0
              controlPlaneEndpoint: "{{ cluster_endpoint }}"
              networking:
                podSubnet: "{{ pod_network_cidr }}"
                serviceSubnet: "10.96.0.0/12"
              ---
              apiVersion: kubelet.config.k8s.io/v1beta1
              kind: KubeletConfiguration
              cgroupDriver: systemd

    - name: kubeadm init実行
      shell: kubeadm init --config=/tmp/kubeadm-config.yaml --upload-certs
      register: kubeadm_init_result
      
    - name: kubeadm init結果保存
      copy:
        content: "{{ kubeadm_init_result.stdout }}"
        dest: /tmp/kubeadm-init-output.log
        
    - name: join-tokenとhash抽出
      shell: |
        grep -A2 "kubeadm join" /tmp/kubeadm-init-output.log | grep -E "(kubeadm join|--token|--discovery-token-ca-cert-hash)"
      register: join_command
      
    - name: join情報を保存
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/worker-join-command.sh
        mode: '0755'
        
    - name: kubectl設定（k8suser用）
      block:
        - name: .kube ディレクトリ作成
          file:
            path: /home/k8suser/.kube
            state: directory
            owner: k8suser
            group: k8suser
            mode: '0755'
            
        - name: kubectl設定コピー
          copy:
            src: /etc/kubernetes/admin.conf
            dest: /home/k8suser/.kube/config
            owner: k8suser
            group: k8suser
            mode: '0600'
            remote_src: yes

    - name: join情報をローカルに取得
      fetch:
        src: /tmp/worker-join-command.sh
        dest: ./worker-join-command.sh
        flat: yes

- name: "Phase 3.2: Worker Nodes をクラスタに参加"
  hosts: workers
  become: yes
  gather_facts: true
  
  tasks:
    - name: cloud-init完了まで待機
      wait_for:
        path: /var/log/cloud-init-complete
        timeout: 300
        
    - name: システム情報確認
      debug:
        msg: "設定中: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
    
    - name: containerd設定確認・修正
      block:
        - name: containerd設定ファイル生成
          shell: containerd config default > /etc/containerd/config.toml
          
        - name: SystemdCgroup有効化
          lineinfile:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            line: '            SystemdCgroup = true'
            backup: yes
            
        - name: containerd再起動
          systemd:
            name: containerd
            state: restarted
            enabled: yes

    - name: join コマンドをWorker Nodeにコピー
      copy:
        src: ./worker-join-command.sh
        dest: /tmp/worker-join-command.sh
        mode: '0755'
        
    - name: Worker NodeをクラスタにJoin
      shell: bash /tmp/worker-join-command.sh
      register: join_result
      
    - name: join結果表示
      debug:
        msg: "{{ join_result.stdout }}"

- name: "Phase 3.3: CNI (Flannel) インストール"
  hosts: control_plane
  become: yes
  become_user: k8suser
  
  tasks:
    - name: Control Plane準備完了まで待機
      wait_for:
        port: 6443
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 300
        
    - name: Flannel YAML取得・適用
      shell: |
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      register: flannel_result
      
    - name: Flannel適用結果
      debug:
        msg: "{{ flannel_result.stdout }}"

- name: "Phase 3.4: クラスタ状態確認"
  hosts: control_plane
  become: yes
  become_user: k8suser
  
  tasks:
    - name: Node状態確認
      shell: kubectl get nodes -o wide
      register: nodes_status
      
    - name: Pod状態確認
      shell: kubectl get pods --all-namespaces
      register: pods_status
      
    - name: クラスタ情報表示
      debug:
        msg: |
          === k8s Cluster Status ===
          Nodes:
          {{ nodes_status.stdout }}
          
          Pods:
          {{ pods_status.stdout }}
          
    - name: kubectl設定情報保存
      shell: |
        echo "=== kubectl 接続情報 ===" > /tmp/k8s-cluster-info.txt
        echo "Control Plane: 192.168.122.10" >> /tmp/k8s-cluster-info.txt
        echo "kubectl config: /home/k8suser/.kube/config" >> /tmp/k8s-cluster-info.txt
        echo "" >> /tmp/k8s-cluster-info.txt
        echo "=== 外部接続用 ===" >> /tmp/k8s-cluster-info.txt
        echo "scp k8suser@192.168.122.10:/home/k8suser/.kube/config ~/.kube/config-k8s-cluster" >> /tmp/k8s-cluster-info.txt
        echo "export KUBECONFIG=~/.kube/config-k8s-cluster" >> /tmp/k8s-cluster-info.txt
        
    - name: クラスタ情報をローカルに取得
      fetch:
        src: /tmp/k8s-cluster-info.txt
        dest: ./k8s-cluster-info.txt
        flat: yes