# Test Harbor HTTP Connection workflow
# Generated with updated add-runner.sh settings

name: Test Harbor HTTP Connection

on:
  workflow_dispatch:  # Manual trigger for testing

jobs:
  test-harbor-push:
    runs-on: slack.rs-runners  # Custom Runner Scale Set
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: kubectl インストール
      run: |
        echo "=== kubectl インストール ==="
        
        # kubectl の最新版をインストール
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # インストール確認
        kubectl version --client --output=yaml
        
        echo "✅ kubectl インストール完了"
        
    - name: Harbor認証情報取得
      run: |
        echo "=== Harbor認証情報取得 ==="
        
        # kubectl in-cluster設定
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster default \
            --server=https://kubernetes.default.svc \
            --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            --kubeconfig=$KUBECONFIG
        kubectl config set-credentials default \
            --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
            --kubeconfig=$KUBECONFIG
        kubectl config set-context default \
            --cluster=default --user=default \
            --kubeconfig=$KUBECONFIG
        kubectl config use-context default --kubeconfig=$KUBECONFIG
        
        # Harbor認証情報取得
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_USERNAME:" | awk '{print $2}' | base64 -d > /tmp/harbor_username
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PASSWORD:" | awk '{print $2}' | base64 -d > /tmp/harbor_password
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_URL:" | awk '{print $2}' | base64 -d > /tmp/harbor_url
        kubectl get secret harbor-auth -n arc-systems -o yaml | grep "HARBOR_PROJECT:" | awk '{print $2}' | base64 -d > /tmp/harbor_project
        
        chmod 600 /tmp/harbor_*
        echo "✅ Harbor認証情報取得完了"
        
    - name: Harbor Login & Docker設定
      run: |
        echo "=== Harbor Login & Docker設定 ==="
        
        HARBOR_USERNAME=$(cat /tmp/harbor_username)
        HARBOR_PASSWORD=$(cat /tmp/harbor_password)
        HARBOR_URL=$(cat /tmp/harbor_url)
        
        # /etc/hosts に Harbor エントリー追加
        echo "Harbor DNS設定を追加中..."
        echo "$HARBOR_URL harbor.local" | sudo tee -a /etc/hosts
        
        # Harbor認証情報デバッグ
        echo "Harbor認証情報確認中..."
        echo "Username: $HARBOR_USERNAME"
        echo "Password length: ${#HARBOR_PASSWORD}"
        echo "URL: $HARBOR_URL"
        
        # Docker daemon設定でinsecure registryを追加
        echo "Docker daemon insecure registry設定中..."
        sudo mkdir -p /etc/docker
        echo '{"insecure-registries":["'$HARBOR_URL'"],"registry-mirrors":[]}' | sudo tee /etc/docker/daemon.json
        
        # Docker daemon設定確認
        echo "Docker daemon設定内容:"
        sudo cat /etc/docker/daemon.json
        
        # Docker daemon再起動（DinD環境では自動的に反映される）
        sleep 5
        
        # Harbor認証テスト (HTTP)
        echo "Harbor認証テスト中..."
        curl -k -u $HARBOR_USERNAME:$HARBOR_PASSWORD "http://$HARBOR_URL/api/v2.0/users/current" || echo "Harbor HTTP認証失敗"
        
        # Docker認証設定
        echo "Docker認証設定を更新中..."
        mkdir -p ~/.docker
        echo "{\"auths\":{\"$HARBOR_URL\":{\"auth\":\"$(echo -n \"$HARBOR_USERNAME:$HARBOR_PASSWORD\" | base64 -w 0)\"}},\"credHelpers\":{},\"insecure-registries\":[\"$HARBOR_URL\"]}" > ~/.docker/config.json
        chmod 600 ~/.docker/config.json
        
        # Docker login実行（HTTP接続を強制）
        echo "Docker login実行中..."
        # HTTPS接続を無効化してHTTP接続を使用
        echo "$HARBOR_PASSWORD" | docker login http://$HARBOR_URL --username "$HARBOR_USERNAME" --password-stdin || echo "Docker login失敗、継続"
        
        # Docker環境変数でinsecure registryを指定（DinD環境対応）
        export DOCKER_CONTENT_TRUST=0
        
        echo "✅ Harbor Login & Docker設定完了"
        
    - name: Harbor Connection Test
      run: |
        echo "=== Harbor Connection Test ==="
        
        HARBOR_URL=$(cat /tmp/harbor_url)
        HARBOR_PROJECT=$(cat /tmp/harbor_project)
        
        # Simple test image pull and push
        echo "Pulling hello-world image for test..."
        docker pull hello-world
        
        # Tag for Harbor
        docker tag hello-world $HARBOR_URL/$HARBOR_PROJECT/hello-world:test
        
        # Test push to Harbor
        echo "Testing push to Harbor..."
        docker push $HARBOR_URL/$HARBOR_PROJECT/hello-world:test
        
        echo "✅ Harbor connection test completed successfully"